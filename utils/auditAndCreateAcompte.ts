import { db } from "@/lib/firebase/config";
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  doc, 
  getDoc 
} from "firebase/firestore";
import { addPayment } from "@/hooks/useProjectPayments";

/**
 * Fonction d'audit qui v√©rifie si un projet a des devis valid√©s mais aucun acompte
 * et cr√©e automatiquement l'acompte si n√©cessaire
 * @param projectId ID du projet √† auditer
 */
export async function auditAndCreateAcompte(projectId: string): Promise<void> {
  console.log('üîç AUDIT - V√©rification des acomptes pour le projet:', projectId);
  
  try {
    // 1. R√©cup√©rer les informations du projet
    console.log('üìã R√©cup√©ration des donn√©es du projet...');
    const projectRef = doc(db, "projects", projectId);
    const projectSnap = await getDoc(projectRef);
    
    if (!projectSnap.exists()) {
      console.log('‚ùå Projet introuvable:', projectId);
      return;
    }

    const projectData = projectSnap.data();
    const firstDepositPercent = projectData.firstDepositPercent;
    const projectBudget = projectData.budget;
    
    console.log('üìä Donn√©es du projet:', {
      firstDepositPercent,
      projectBudget
    });
    
    if (!firstDepositPercent) {
      console.log('‚ö†Ô∏è Aucun pourcentage d\'acompte d√©fini pour ce projet');
      return;
    }

    if (!projectBudget || projectBudget <= 0) {
      console.log('‚ö†Ô∏è Budget du projet non d√©fini ou invalide');
      return;
    }

    // 2. V√©rifier s'il existe d√©j√† des acomptes
    console.log('üîç V√©rification des acomptes existants...');
    const existingAcomptes = await getExistingAcomptes(projectId);
    
    if (existingAcomptes.length > 0) {
      console.log('‚úÖ Des acomptes existent d√©j√† pour ce projet:', existingAcomptes.length);
      return;
    }

    // 3. Chercher des devis valid√©s
    console.log('üîç Recherche de devis valid√©s...');
    const validatedDevis = await getValidatedDevis(projectId);
    
    console.log('üìã Devis valid√©s trouv√©s:', validatedDevis.length, validatedDevis);
    
    if (validatedDevis.length === 0) {
      console.log('‚ÑπÔ∏è Aucun devis valid√© trouv√©, pas de cr√©ation d\'acompte');
      return;
    }

    // 4. Si on a des devis valid√©s mais aucun acompte, cr√©er l'acompte automatique
    console.log('üöÄ Cr√©ation d\'acompte automatique n√©cessaire!');
    
    const acompteAmount = Math.round((projectBudget * firstDepositPercent) / 100);
    
    console.log('üí∞ Calcul de l\'acompte:', {
      projectBudget,
      firstDepositPercent,
      acompteAmount
    });

    // Prendre le premier devis valid√© comme r√©f√©rence
    const firstValidatedDevis = validatedDevis[0];
    const devisNumber = firstValidatedDevis.numero || firstValidatedDevis.id;
    
    await addPayment({
      projectId,
      title: `Premier versement (${firstDepositPercent}%)`,
      description: `Premier versement de ${firstDepositPercent}% du montant total des travaux, conform√©ment aux conditions contractuelles. Montant calcul√© sur la base du budget projet de ${projectBudget.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' })}. G√©n√©r√© suite √† la validation du devis ${devisNumber}.`,
      amount: acompteAmount,
      date: new Date().toISOString(),
      status: 'en_attente',
      images: [],
      documents: [],
      dateValidation: '',
    });

    console.log('üéâ SUCC√àS! Acompte automatique cr√©√© par audit:', {
      projectId,
      amount: acompteAmount,
      percentage: firstDepositPercent,
      baseAmount: projectBudget,
      referencedDevis: firstValidatedDevis.id
    });

  } catch (error: any) {
    console.error('üí• ERREUR dans auditAndCreateAcompte:', error);
    console.error('Stack trace:', error?.stack);
  }
}

/**
 * R√©cup√®re tous les devis valid√©s d'un projet (insensible √† la casse)
 */
async function getValidatedDevis(projectId: string): Promise<any[]> {
  const validatedDevis: any[] = [];
  
  try {
    console.log('üîç Recherche de devis valid√©s pour le projet:', projectId);
    
    // V√©rifier dans la collection devis (r√©cup√©rer TOUS les devis du projet)
    const devisQuery = query(
      collection(db, 'devis'),
      where('projectId', '==', projectId)
    );
    const devisSnapshot = await getDocs(devisQuery);
    
    console.log('üìã Devis trouv√©s dans collection "devis":', devisSnapshot.size);
    
    devisSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const status = data.status;
      console.log(`üìé Devis ${doc.id}: status="${status}"`);
      
      // V√©rification insensible √† la casse
      if (status && status.toLowerCase() === 'valid√©') {
        console.log(`‚úÖ Devis valid√© trouv√©: ${doc.id} (status: "${status}")`);
        validatedDevis.push({
          id: doc.id,
          type: 'devis',
          ...data
        });
      }
    });
    
    // V√©rifier dans la collection devisConfig (r√©cup√©rer TOUS les devisConfig du projet)
    const devisConfigQuery = query(
      collection(db, 'devisConfig'),
      where('projectId', '==', projectId)
    );
    const devisConfigSnapshot = await getDocs(devisConfigQuery);
    
    console.log('üìã DevisConfig trouv√©s dans collection "devisConfig":', devisConfigSnapshot.size);
    
    devisConfigSnapshot.docs.forEach(doc => {
      const data = doc.data();
      const status = data.status;
      console.log(`üìé DevisConfig ${doc.id}: status="${status}"`);
      
      // V√©rification insensible √† la casse
      if (status && status.toLowerCase() === 'valid√©') {
        console.log(`‚úÖ DevisConfig valid√© trouv√©: ${doc.id} (status: "${status}")`);
        validatedDevis.push({
          id: doc.id,
          type: 'devisConfig',
          ...data
        });
      }
    });
    
  } catch (error) {
    console.error('Erreur lors de la r√©cup√©ration des devis valid√©s:', error);
  }
  
  return validatedDevis;
}

/**
 * R√©cup√®re tous les acomptes existants d'un projet
 */
async function getExistingAcomptes(projectId: string): Promise<any[]> {
  try {
    const paymentsQuery = query(
      collection(db, 'payments'),
      where('projectId', '==', projectId)
    );
    const paymentsSnapshot = await getDocs(paymentsQuery);
    
    return paymentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    
  } catch (error) {
    console.error('Erreur lors de la v√©rification des acomptes existants:', error);
    return [];
  }
}
