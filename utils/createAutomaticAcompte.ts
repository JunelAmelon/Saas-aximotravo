import { db } from "@/lib/firebase/config";
import { 
  collection, 
  query, 
  where, 
  getDocs, 
  doc, 
  getDoc,
  addDoc 
} from "firebase/firestore";
import { addPayment } from "@/hooks/useProjectPayments";

/**
 * Cr√©e automatiquement une demande d'acompte lors de la validation du premier devis par le client
 * @param projectId ID du projet
 * @param devisId ID du devis valid√©
 * @param devisType Type de devis ("devis" ou "devisConfig")
 */
export async function createAutomaticAcompte(
  projectId: string,
  devisId: string,
  devisType: "devis" | "devisConfig"
): Promise<void> {
  console.log('üöÄ D√âBUT createAutomaticAcompte - Fonction appel√©e avec:', {
    projectId,
    devisId,
    devisType
  });
  
  try {
    console.log('üîÑ V√©rification pour cr√©ation automatique d\'acompte...');

    // 1. R√©cup√©rer les informations du projet
    console.log('üìã √âtape 1: R√©cup√©ration du projet:', projectId);
    const projectRef = doc(db, "projects", projectId);
    const projectSnap = await getDoc(projectRef);
    
    if (!projectSnap.exists()) {
      console.error('‚ùå Projet introuvable:', projectId);
      return;
    }
    console.log('‚úÖ Projet trouv√©');

    const projectData = projectSnap.data();
    const firstDepositPercent = projectData.firstDepositPercent;
    const projectBudget = projectData.budget;
    
    console.log('üìä Donn√©es du projet r√©cup√©r√©es:', {
      firstDepositPercent,
      projectBudget,
      projectData: projectData
    });
    
    if (!firstDepositPercent) {
      console.log('‚ö†Ô∏è Aucun pourcentage d\'acompte d√©fini pour ce projet');
      return;
    }

    if (!projectBudget || projectBudget <= 0) {
      console.log('‚ö†Ô∏è Budget du projet non d√©fini ou invalide');
      return;
    }
    
    console.log('‚úÖ Pourcentage et budget valid√©s');

    // 2. V√©rifier si c'est le premier devis valid√© du projet
    console.log('üìã √âtape 2: V√©rification premier devis valid√©');
    const isFirstValidatedDevis = await checkIfFirstValidatedDevis(projectId, devisId, devisType);
    
    console.log('üîç R√©sultat v√©rification premier devis:', isFirstValidatedDevis);
    
    if (!isFirstValidatedDevis) {
      console.log('‚ÑπÔ∏è Ce n\'est pas le premier devis valid√©, pas de cr√©ation d\'acompte automatique');
      return;
    }
    
    console.log('‚úÖ C\'est bien le premier devis valid√©');

    // 3. V√©rifier qu'aucun acompte n'existe d√©j√† pour ce projet
    console.log('üìã √âtape 3: V√©rification acomptes existants');
    const existingAcomptes = await checkExistingAcomptes(projectId);
    
    console.log('üîç Acomptes existants trouv√©s:', existingAcomptes.length, existingAcomptes);
    
    if (existingAcomptes.length > 0) {
      console.log('‚ÑπÔ∏è Des acomptes existent d√©j√† pour ce projet, pas de cr√©ation automatique');
      return;
    }
    
    console.log('‚úÖ Aucun acompte existant, on peut cr√©er');

    // 4. Calculer le montant de l'acompte bas√© sur le budget du projet
    console.log('üìã √âtape 4: Calcul du montant de l\'acompte');
    const acompteAmount = Math.round((projectBudget * firstDepositPercent) / 100);
    
    console.log('üí∞ Montant calcul√©:', {
      projectBudget,
      firstDepositPercent,
      acompteAmount
    });

    // 5. Cr√©er la demande d'acompte automatique
    console.log('üìã √âtape 5: Cr√©ation de l\'acompte dans Firestore');
    
    // R√©cup√©rer le num√©ro du devis pour la r√©f√©rence
    const devisDoc = await getDoc(doc(db, devisType, devisId));
    const devisData = devisDoc.data();
    const devisNumber = devisData?.numero || devisId;
    
    await addPayment({
      projectId,
      title: `Premier versement (${firstDepositPercent}%)`,
      description: `Premier versement de ${firstDepositPercent}% du montant total des travaux, conform√©ment aux conditions contractuelles. Montant calcul√© sur la base du budget projet de ${projectBudget.toLocaleString('fr-FR', { style: 'currency', currency: 'EUR' })}. D√©clench√© suite √† la validation du devis ${devisNumber}.`,
      amount: acompteAmount,
      date: new Date().toISOString(),
      status: 'en_attente',
      images: [],
      documents: [],
      dateValidation: '',
    });

    console.log('üéâ SUCC√àS! Acompte automatique cr√©√© avec succ√®s:', {
      projectId,
      amount: acompteAmount,
      percentage: firstDepositPercent,
      baseAmount: projectBudget,
      calculatedFrom: 'project budget'
    });

  } catch (error: any) {
    console.error('üí• ERREUR CRITIQUE dans createAutomaticAcompte:', error);
    console.error('Stack trace:', error?.stack);
    // Ne pas faire √©chouer la validation du devis si la cr√©ation d'acompte √©choue
  }
  
  console.log('üèÅ FIN createAutomaticAcompte');
}

/**
 * V√©rifie si c'est le premier devis valid√© du projet
 */
async function checkIfFirstValidatedDevis(
  projectId: string, 
  currentDevisId: string, 
  currentDevisType: "devis" | "devisConfig"
): Promise<boolean> {
  try {
    // V√©rifier dans la collection devis
    const devisQuery = query(
      collection(db, 'devis'),
      where('projectId', '==', projectId),
      where('status', '==', 'valid√©')
    );
    const devisSnapshot = await getDocs(devisQuery);
    
    // V√©rifier dans la collection devisConfig
    const devisConfigQuery = query(
      collection(db, 'devisConfig'),
      where('projectId', '==', projectId),
      where('status', '==', 'valid√©')
    );
    const devisConfigSnapshot = await getDocs(devisConfigQuery);

    // Compter le nombre total de devis valid√©s (en excluant le devis actuel)
    let validatedCount = 0;
    
    devisSnapshot.docs.forEach(doc => {
      if (!(currentDevisType === 'devis' && doc.id === currentDevisId)) {
        validatedCount++;
      }
    });
    
    devisConfigSnapshot.docs.forEach(doc => {
      if (!(currentDevisType === 'devisConfig' && doc.id === currentDevisId)) {
        validatedCount++;
      }
    });

    // C'est le premier si aucun autre devis n'est valid√©
    return validatedCount === 0;
    
  } catch (error) {
    console.error('Erreur lors de la v√©rification du premier devis valid√©:', error);
    return false;
  }
}

/**
 * V√©rifie s'il existe d√©j√† des acomptes pour ce projet
 */
async function checkExistingAcomptes(projectId: string): Promise<any[]> {
  try {
    const paymentsQuery = query(
      collection(db, 'payments'),
      where('projectId', '==', projectId)
    );
    const paymentsSnapshot = await getDocs(paymentsQuery);
    
    return paymentsSnapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
    
  } catch (error) {
    console.error('Erreur lors de la v√©rification des acomptes existants:', error);
    return [];
  }
}
